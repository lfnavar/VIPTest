//
//  DetailProductViewController.swift
//  VIP test
//
//  Created by LFNAVAR on 2/21/19.
//  Copyright (c) 2019 LFNAVAR. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailProductDisplayLogic: class
{
  func displayProduct(viewModel: DetailProduct.GetProduct.ViewModel)
}

class DetailProductViewController: UIViewController, DetailProductDisplayLogic
{
  var interactor: DetailProductBusinessLogic?
  var router: (NSObjectProtocol & DetailProductRoutingLogic & DetailProductDataPassing)?

  // MARK: Object lifecycle
  
    override func awakeFromNib() {
        super.awakeFromNib()
        setup()
    }
  
  // MARK: Setup to connect the classes for the scene
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailProductInteractor()
    let presenter = DetailProductPresenter()
    let router = DetailProductRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
//  // MARK: Routing
//
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    getProduct()
  }
  
  // MARK: Do all the work to show the data in the view
    @IBOutlet weak var stationName: UILabel!
    @IBOutlet weak var status: UILabel!
    @IBOutlet weak var availableBikes: UILabel!
    @IBOutlet weak var latitude: UILabel!
    @IBOutlet weak var longitude: UILabel!
    
    // Call the protocol to get the data in the interactor.
  func getProduct()
  {
    let request = DetailProduct.GetProduct.Request()
    interactor?.getProduct(request: request)
  }
  
    // Logic to show the data sent from the presenter
  func displayProduct(viewModel: DetailProduct.GetProduct.ViewModel)
  {
    stationName.text = "Station Name: \(viewModel.displayedProducts.stationName)"
    availableBikes.text = "Available Bikes: \(viewModel.displayedProducts.availableBikes)"
    status.text = "Status: \(viewModel.displayedProducts.statusValue)"
    latitude.text = "Latitude: \(viewModel.displayedProducts.latitude)"
    longitude.text = "Longitude: \(viewModel.displayedProducts.longitude)"
  }
}
